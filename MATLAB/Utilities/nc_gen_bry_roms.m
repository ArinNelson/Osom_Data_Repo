function status = nc_gen_bry_roms(opts,nx,ny,nz,var_to_incl)

    % Unlimited dimension
    c_unlimited = netcdf.getConstant('NC_UNLIMITED');
    c_global    = netcdf.getConstant('GLOBAL');

    % Init
    if(exist(opts.FileName,'file')==2); delete(opts.FileName); end
    ncid = netcdf.create(opts.FileName,'NETCDF4');
  
    % Set the global attributes
    netcdf.putAtt(ncid,c_global,'type','BOUNDARY file');
    netcdf.putAtt(ncid,c_global,'title',opts.Title);
    netcdf.putAtt(ncid,c_global,'history',['generated by nc_gen_bry_roms.m on ' datestr(now)]);

    % Set the dimensions
    dimid = [];
    dimid(end+1) = netcdf.defDim(ncid,'xi_rho',     nx          );
    dimid(end+1) = netcdf.defDim(ncid,'xi_u',       nx-1        );
    dimid(end+1) = netcdf.defDim(ncid,'xi_v',       nx          );
    dimid(end+1) = netcdf.defDim(ncid,'eta_rho',    ny          );
    dimid(end+1) = netcdf.defDim(ncid,'eta_u',      ny          );
    dimid(end+1) = netcdf.defDim(ncid,'eta_v',      ny-1        );
    dimid(end+1) = netcdf.defDim(ncid,'s_rho',      nz          );
    dimid(end+1) = netcdf.defDim(ncid,'s_w',        nz+1        );
    dimid(end+1) = netcdf.defDim(ncid,'tracer',     2           );
    dimid(end+1) = netcdf.defDim(ncid,'bry_time',   c_unlimited );
    
	% Define the vertical grid variables
    varid = [];
    varid(end+1) = netcdf.defVar(ncid,'spherical','NC_INT',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','grid type logical switch');
        netcdf.putAtt(ncid,varid(end),'flag_values','0, 1');
        netcdf.putAtt(ncid,varid(end),'flag_meanings','Cartesian, Spherical');
    varid(end+1) = netcdf.defVar(ncid,'Vtransform','NC_INT',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','vertical terrain-following transformation equation');
    varid(end+1) = netcdf.defVar(ncid,'Vstretching','NC_INT',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','vertical terrain-following stretching equation');
    varid(end+1) = netcdf.defVar(ncid,'theta_s','NC_DOUBLE',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate surface control parameter');
    varid(end+1) = netcdf.defVar(ncid,'theta_b','NC_DOUBLE',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate bottom control parameter');
    varid(end+1) = netcdf.defVar(ncid,'Tcline','NC_DOUBLE',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate surface/bottom layer width');
        netcdf.putAtt(ncid,varid(end),'units','meters');
    varid(end+1) = netcdf.defVar(ncid,'hc','NC_DOUBLE',[]);
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate parameter, critical depth');
        netcdf.putAtt(ncid,varid(end),'units','meters');
    varid(end+1) = netcdf.defVar(ncid,'s_rho','NC_DOUBLE',dimid(7));
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate at RHO-points');
        netcdf.putAtt(ncid,varid(end),'valid_min','-1');
        netcdf.putAtt(ncid,varid(end),'valid_max','0');
        netcdf.putAtt(ncid,varid(end),'positive','up');
        netcdf.putAtt(ncid,varid(end),'standard_name','ocean_s_coordinate_g2');
        netcdf.putAtt(ncid,varid(end),'formula_terms','s: s_rho C: Cs_r eta: zeta depth: h depth_c: hc');
    varid(end+1) = netcdf.defVar(ncid,'s_w','NC_DOUBLE',dimid(8));
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate at W-points');
        netcdf.putAtt(ncid,varid(end),'valid_min','-1');
        netcdf.putAtt(ncid,varid(end),'valid_max','0');
        netcdf.putAtt(ncid,varid(end),'positive','up');
        netcdf.putAtt(ncid,varid(end),'standard_name','ocean_s_coordinate_g2');
        netcdf.putAtt(ncid,varid(end),'formula_terms','s: s_w C: Cs_w eta: zeta depth: h depth_c: hc');
    varid(end+1) = netcdf.defVar(ncid,'Cs_r','NC_DOUBLE',dimid(7));
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate stretching function at RHO-points');
        netcdf.putAtt(ncid,varid(end),'valid_min','-1');
        netcdf.putAtt(ncid,varid(end),'valid_max','0');
    varid(end+1) = netcdf.defVar(ncid,'Cs_w','NC_DOUBLE',dimid(8));
        netcdf.putAtt(ncid,varid(end),'long_name','S-coordinate stretching function at W-points');
        netcdf.putAtt(ncid,varid(end),'valid_min','-1');
        netcdf.putAtt(ncid,varid(end),'valid_max','0');
        
	% Grid variables dependent on WSEN
    str_wsen = {'west','south','east','north'};
    ndx_wsen = [3 0 3 0];
    for i=1:4
    if( opts.WSEN(i)==1 )
        
        % RHO grid vars for this wsen
        varid(end+1) = netcdf.defVar(ncid,['lon_rho_' str_wsen{i}],'NC_DOUBLE',dimid(1+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['longitude of RHO-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_east');
            netcdf.putAtt(ncid,varid(end),'standard_name','longitude');
        varid(end+1) = netcdf.defVar(ncid,['lat_rho_' str_wsen{i}],'NC_DOUBLE',dimid(1+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['latitude of RHO-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_north');
            netcdf.putAtt(ncid,varid(end),'standard_name','latitude');
            
        % U grid vars for this wsen    
        varid(end+1) = netcdf.defVar(ncid,['lon_u_' str_wsen{i}],'NC_DOUBLE',dimid(2+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['longitude of U-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_east');
            netcdf.putAtt(ncid,varid(end),'standard_name','longitude');
        varid(end+1) = netcdf.defVar(ncid,['lat_u_' str_wsen{i}],'NC_DOUBLE',dimid(2+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['latitude of U-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_north');
            netcdf.putAtt(ncid,varid(end),'standard_name','latitude');
            
        % V grid vars for this wsen    
        varid(end+1) = netcdf.defVar(ncid,['lon_v_' str_wsen{i}],'NC_DOUBLE',dimid(3+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['longitude of V-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_east');
            netcdf.putAtt(ncid,varid(end),'standard_name','longitude');
        varid(end+1) = netcdf.defVar(ncid,['lat_v_' str_wsen{i}],'NC_DOUBLE',dimid(3+ndx_wsen(i)));
            netcdf.putAtt(ncid,varid(end),'long_name',['latitude of V-points, ' str_wsen{i} 'ern boundary condition']);
            netcdf.putAtt(ncid,varid(end),'units','degree_north');
            netcdf.putAtt(ncid,varid(end),'standard_name','latitude'); 
        
    end
    end
    clear i;

    % Time variable
    varid(end+1) = netcdf.defVar(ncid,'bry_time','NC_DOUBLE',dimid(end));
        netcdf.putAtt(ncid,varid(end),'long_name','days since initialization');
        netcdf.putAtt(ncid,varid(end),'units','days');
        
    % Data Variables
    for iv=1:numel(var_to_incl)
    switch var_to_incl{iv}
    
    	%-----------------------------------------------------------------%  
        case 'zeta'
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['zeta_' str_wsen{i}],'NC_DOUBLE',[dimid(1+ndx_wsen(i)) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['free-surface, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','meters');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_rho_', str_wsen{i} ', lat_rho_' str_wsen{i} ', bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
            
    	%-----------------------------------------------------------------%  
        case 'ubar' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['ubar_' str_wsen{i}],'NC_DOUBLE',[dimid(2+ndx_wsen(i)) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['vertically-integrated u-momentum, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','meters second-1');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_u_', str_wsen{i} ', lat_u_' str_wsen{i} ', bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
            
    	%-----------------------------------------------------------------%  
        case 'vbar' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['vbar_' str_wsen{i}],'NC_DOUBLE',[dimid(3+ndx_wsen(i)) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['vertically-integrated v-momentum, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','meters second-1');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_v_', str_wsen{i} ', lat_v_' str_wsen{i} ', bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
        
    	%-----------------------------------------------------------------%  
        case 'u' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['u_' str_wsen{i}],'NC_DOUBLE',[dimid(2+ndx_wsen(i)) dimid(7) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['u-momentum, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','meters second-1');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_u_', str_wsen{i} ', lat_u_' str_wsen{i} ', s_rho, bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
            
    	%-----------------------------------------------------------------%  
        case 'v' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['v_' str_wsen{i}],'NC_DOUBLE',[dimid(3+ndx_wsen(i)) dimid(7) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['v-momentum, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','meters second-1');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_v_', str_wsen{i} ', lat_v_' str_wsen{i} ', s_rho, bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
            
    	%-----------------------------------------------------------------%  
        case 'temp' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['temp_' str_wsen{i}],'NC_DOUBLE',[dimid(2+ndx_wsen(i)) dimid(7) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['temperature, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','Celsuis');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_rho_', str_wsen{i} ', lat_rho_' str_wsen{i} ', s_rho, bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
            
    	%-----------------------------------------------------------------%  
        case 'salt' 
            for i=1:4
            if( opts.WSEN(i)==1 )
                varid(end+1) = netcdf.defVar(ncid,['salt_' str_wsen{i}],'NC_DOUBLE',[dimid(2+ndx_wsen(i)) dimid(7) dimid(end)]);
                    netcdf.putAtt(ncid,varid(end),'long_name',['salinity, ' str_wsen{i} 'ern boundary condition']);
                    netcdf.putAtt(ncid,varid(end),'units','g/kg');
                    netcdf.putAtt(ncid,varid(end),'coordinates',['lon_rho_', str_wsen{i} ', lat_rho_' str_wsen{i} ', s_rho, bry_time']);
                    netcdf.putAtt(ncid,varid(end),'time','bry_time');
            end
            end
        
    	%-----------------------------------------------------------------%  
        otherwise; 
            warning(['Unknown or unimplemented variable: ' var_to_incl{iv} ', skipping...']);
            
    end
    end
   
    % End definitions and close
    netcdf.endDef(ncid);
    netcdf.close(ncid);
  
    % Success!
    status = 1;
    
end